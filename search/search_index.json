{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"","title":"index"},{"location":"getting-started/","text":"Getting started Nocalhost is a cloud native development environment based on Kubernetes.","title":"Getting started"},{"location":"getting-started/#getting-started","text":"Nocalhost is a cloud native development environment based on Kubernetes.","title":"Getting started"},{"location":"installation/","text":"Prerequisites To use nocalhost, please make sure that git , kubectl and helm are installed. nhctl The Nocalhost command-line tool: nhctl, allows you to run commands against Nocalhost. You can use nhctl to install application, create DevSpace, start DevMode. See nhctl for full list of sub commands. Install nhctl on Linux Install nhctl binary with curl on Linux Download the latest release with command: curl -LO \"https://github.com/nocalhost/nocalhost/releases/download/v0.0.3/nhctl-linux-amd64\" -o nhctl Make the nhctl binary executable. chmod +x ./nhctl Move nhctl binary in to your PATH. sudo mv ./nhctl /usr/local/bin/nhctl Test you installed. nhctl version Install nhctl using package management Homebrew If you are on Linux and using Homebrew package manager, nhctl is available for installation . brew install nocalhost/repo/nocalhost nhctl version Install nhctl on macOS Install nhctl binary with curl on macOS Download the latest release with command: curl -LO \"https://github.com/nocalhost/nocalhost/releases/download/v0.0.3/nhctl-darwin-amd64\" -o nhctl Make the nhctl binary executable. chmod +x ./nhctl Move nhctl binary in to your PATH. sudo mv ./nhctl /usr/local/bin/nhctl Test you installed. nhctl version Install nhctl with Homebrew on macOS Run the installation command brew install nocalhost/repo/nocalhost Test you installed nhctl version Install nhctl on Windows Install nhctl binary on Windows Download the latest release from this link . Or if you have curl installed, use this command: curl -LO \"https://github.com/nocalhost/nocalhost/releases/download/v0.0.3/nhctl-windows-amd64.exe\" -o nhctl.exe Add nhctl binary in to your PATH. Test you installed. nhctl version Install nhctl using package management baulk If you are on Windows and using baulk package manager, nhctl is available for installation. Open CMD with Administrators. baulk install nocalhost baulk-exec cmd nhctl version Install Nocalhost VScode Plugin The Nocalhost VScode Plugin allows you to use Nocalhost on VSCode Editor. You can install application, open DevSpace start DevMode in VSCode directly. Install Nocalhost VScode Plugin on VScode Marketplace Follow this link: https://marketplace.visualstudio.com/items?itemName=nocalhost.nocalhost Or Install Nocalhost VScode Plugin on VScode Editor Open the VScode Editor, and click left bar \"Extensions\" icon. Type \"nocalhost\" in the search input box. Select the \"nocalhost-vscode-plugin\", and the click install button to install.","title":"Installation"},{"location":"installation/#nhctl","text":"The Nocalhost command-line tool: nhctl, allows you to run commands against Nocalhost. You can use nhctl to install application, create DevSpace, start DevMode. See nhctl for full list of sub commands.","title":"nhctl"},{"location":"installation/#install-nhctl-on-linux","text":"","title":"Install nhctl on Linux"},{"location":"installation/#install-nhctl-binary-with-curl-on-linux","text":"Download the latest release with command: curl -LO \"https://github.com/nocalhost/nocalhost/releases/download/v0.0.3/nhctl-linux-amd64\" -o nhctl Make the nhctl binary executable. chmod +x ./nhctl Move nhctl binary in to your PATH. sudo mv ./nhctl /usr/local/bin/nhctl Test you installed. nhctl version","title":"Install nhctl binary with curl on Linux"},{"location":"installation/#install-nhctl-using-package-management","text":"Homebrew If you are on Linux and using Homebrew package manager, nhctl is available for installation . brew install nocalhost/repo/nocalhost nhctl version","title":"Install nhctl using package management"},{"location":"installation/#install-nhctl-on-macos","text":"","title":"Install nhctl on macOS"},{"location":"installation/#install-nhctl-binary-with-curl-on-macos","text":"Download the latest release with command: curl -LO \"https://github.com/nocalhost/nocalhost/releases/download/v0.0.3/nhctl-darwin-amd64\" -o nhctl Make the nhctl binary executable. chmod +x ./nhctl Move nhctl binary in to your PATH. sudo mv ./nhctl /usr/local/bin/nhctl Test you installed. nhctl version","title":"Install nhctl binary with curl on macOS"},{"location":"installation/#install-nhctl-with-homebrew-on-macos","text":"Run the installation command brew install nocalhost/repo/nocalhost Test you installed nhctl version","title":"Install nhctl with Homebrew on macOS"},{"location":"installation/#install-nhctl-on-windows","text":"","title":"Install nhctl on Windows"},{"location":"installation/#install-nhctl-binary-on-windows","text":"Download the latest release from this link . Or if you have curl installed, use this command: curl -LO \"https://github.com/nocalhost/nocalhost/releases/download/v0.0.3/nhctl-windows-amd64.exe\" -o nhctl.exe Add nhctl binary in to your PATH. Test you installed. nhctl version","title":"Install nhctl binary on Windows"},{"location":"installation/#install-nhctl-using-package-management_1","text":"baulk If you are on Windows and using baulk package manager, nhctl is available for installation. Open CMD with Administrators. baulk install nocalhost baulk-exec cmd nhctl version","title":"Install nhctl using package management"},{"location":"installation/#install-nocalhost-vscode-plugin","text":"The Nocalhost VScode Plugin allows you to use Nocalhost on VSCode Editor. You can install application, open DevSpace start DevMode in VSCode directly.","title":"Install Nocalhost VScode Plugin"},{"location":"installation/#install-nocalhost-vscode-plugin-on-vscode-marketplace","text":"Follow this link: https://marketplace.visualstudio.com/items?itemName=nocalhost.nocalhost","title":"Install Nocalhost VScode Plugin on VScode Marketplace"},{"location":"installation/#or-install-nocalhost-vscode-plugin-on-vscode-editor","text":"Open the VScode Editor, and click left bar \"Extensions\" icon. Type \"nocalhost\" in the search input box. Select the \"nocalhost-vscode-plugin\", and the click install button to install.","title":"Or Install Nocalhost VScode Plugin on VScode Editor"},{"location":"Concepts/application/","text":"","title":"Application"},{"location":"Concepts/cluster/","text":"","title":"Cluster"},{"location":"Concepts/devcontainer/","text":"","title":"DevContainer"},{"location":"Concepts/devmode/","text":"","title":"DevMode"},{"location":"Concepts/devspace/","text":"","title":"DevSpace"},{"location":"Concepts/service/","text":"","title":"Service"},{"location":"Concepts/user/","text":"","title":"User"},{"location":"FAQ/default-account/","text":"This is the first time I access the administrator website and I cannot find the registr link. How do I log in? Nocalhost is not support user register by self. You can log in with the default administrator account email and password. The default account's Email is: admin@admin.com The default account's password is: 123456 After login, you can change admin user's Email and password. And add users.","title":"Default admin account"},{"location":"FAQ/default-account/#this-is-the-first-time-i-access-the-administrator-website-and-i-cannot-find-the-registr-link-how-do-i-log-in","text":"Nocalhost is not support user register by self. You can log in with the default administrator account email and password. The default account's Email is: admin@admin.com The default account's password is: 123456 After login, you can change admin user's Email and password. And add users.","title":"This is the first time I access the administrator website and I cannot find the registr link. How do I log in?"},{"location":"FAQ/dep-label-selector/","text":"How does Nocalhost resolve Pods/Jobs starting orders of services in details? There are two options ( dependPodsLabelSelector and dependJobsLabelSelector ) defined in Nocalhost config.yaml for every services to define dependencies. Nocalhost will arrange Pods/Jobs containing labels defined in these options to start ahead of service itself. For example, we config service foo as below: ... services: - name: foo dependPodsLabelSelector: - \"name=mysql\" - \"name=redis\" ... While Nocalhost is going to start Pods within service foo , it will select Pods with labels of name=mysql or name=redis . Nocalhost starts the selected pods first. Once all selected Pods have been started, Nocalhost starts service foo .","title":"Dependency Label Selector"},{"location":"FAQ/dep-label-selector/#how-does-nocalhost-resolve-podsjobs-starting-orders-of-services-in-details","text":"There are two options ( dependPodsLabelSelector and dependJobsLabelSelector ) defined in Nocalhost config.yaml for every services to define dependencies. Nocalhost will arrange Pods/Jobs containing labels defined in these options to start ahead of service itself. For example, we config service foo as below: ... services: - name: foo dependPodsLabelSelector: - \"name=mysql\" - \"name=redis\" ... While Nocalhost is going to start Pods within service foo , it will select Pods with labels of name=mysql or name=redis . Nocalhost starts the selected pods first. Once all selected Pods have been started, Nocalhost starts service foo .","title":"How does Nocalhost resolve Pods/Jobs starting orders of services in details?"},{"location":"FAQ/deployment-with-hpa/","text":"Does Nocalhost have support to develop components(services) that controls by Deployments with HPA (Horizontal Pod Autoscaler)? No. It is suggested that remove HPA controller from Deployments before developing components(services) with Nocalhost.","title":"Deployment with HPA"},{"location":"FAQ/deployment-with-hpa/#does-nocalhost-have-support-to-develop-componentsservices-that-controls-by-deployments-with-hpa-horizontal-pod-autoscaler","text":"No. It is suggested that remove HPA controller from Deployments before developing components(services) with Nocalhost.","title":"Does Nocalhost have support to develop components(services) that controls by Deployments with HPA (Horizontal Pod Autoscaler)?"},{"location":"FAQ/multi-container-pods/","text":"Does Nocalhost have support to develop components(services) which have Pods running multiple containers? No, it is not currently supported. We will support it in the future.","title":"Multi-container Pods"},{"location":"FAQ/multi-container-pods/#does-nocalhost-have-support-to-develop-componentsservices-which-have-pods-running-multiple-containers","text":"No, it is not currently supported. We will support it in the future.","title":"Does Nocalhost have support to develop components(services) which have Pods running multiple containers?"},{"location":"FAQ/ssh-private-keys-passphrase/","text":"Does Nocalhost have support to input passphrase for SSH private keys? No, it is not currently supported.","title":"SSH Private Keys Passphrase"},{"location":"FAQ/ssh-private-keys-passphrase/#does-nocalhost-have-support-to-input-passphrase-for-ssh-private-keys","text":"No, it is not currently supported.","title":"Does Nocalhost have support to input passphrase for SSH private keys?"},{"location":"FAQ/vscode-plugin-limits/","text":"Does Nocalhost have support to develop components(services) which depend on Kubernetes cluster resources such as Namespaces, ClusterRole? It is not supported by Visual Studio Code plugin, but Nocalhost CLI tool nhctl supports.","title":"VSCode Plugin Limits"},{"location":"FAQ/vscode-plugin-limits/#does-nocalhost-have-support-to-develop-componentsservices-which-depend-on-kubernetes-cluster-resources-such-as-namespaces-clusterrole","text":"It is not supported by Visual Studio Code plugin, but Nocalhost CLI tool nhctl supports.","title":"Does Nocalhost have support to develop components(services) which depend on Kubernetes cluster resources such as Namespaces, ClusterRole?"},{"location":"References/architecture/","text":"What is Nocalhost? Nocalhost is Cloud Native Development Environment. Currently, it support developing applications based on Kubernetes: Deploy applications just one click, even with complex service dependencies Build, test and debug applications directly inside Kubernetes Develop with hot reloading : updates your running containers without rebuilding images or restarting containers How does it work? Deploy Nocalhost Server (nocalhost-api, nocalhost-web) to the kubernetes cluster. For Admin Use the management platform provided by Nocalhost Server to create users, configure the application's kubernetes cluster, create applications, and configure the application's DevSpace(Currently, DevSpace = ServiceAccount + Namespace). When kubernetes cluster configured, nocalhost-dep will be automatically deployed in the nocalhost-reservered namespace to control the order of microservices' starting. For Developer Install the nhctl CLI on the client machine and install the Nocalhost plugin in the IDE. Configure the nocalhost-api server url (for example: http://ip:port) in the plugin and sign in server, then deploy application to the kubernetes cluster. For Developer Developers can switch a specified micro service to DevMode. Once DevMode started, Nocalhost will replace the container of that micro service to DevContainer specified by configuration, sync source codes to DevContainer and forward the port of DevContainer to local. Here's the diagram of Nocalhost with all the components tied together. Component IDE plugins * IDE plugin packs the capabilities of nhctl and nocalhost-api development environment management to provide users with a better experience. nhctl nhctl is the core component of nocalhost, here are the core features: Install Application Nocalhost will deploy applications to kubernetes cluster according to the dependencies of the application which is defined in config YAML under the .nocalhost directory. Hot Reloading Via File Sync Any changes made to the local source codes will be synchronized to the remote DevContainer automatically. Developer can recompile and restart their process to verify code changes. In the future, we will support configure hotreload commands instead of restart processes manually. uninstall application Uninstalling application from DevSpace. nocalhost-web * nocalhost-web provides a web dashboard to manage users, development kubernetes clusters, applications and DevSpaces. nocalhost-api * Nocalhost manages serviceAccount, namespace and application in kubernetes cluster through api-server, and persists to database, providing data support for IDE plugin usage. nocalhost-dep * When application microservices are deployed in a Kubernetes cluster, there is no way to controler the startup sequence and dependencies of these microservices. A typical scenario is: Service A and Service B both rely on Mysql, Redis, RabbitMQ. Service A and Service B cannot be started unless these dependent services are available. Usually developers have to wait the Pod's restarting rely on Kubernetes' HealthCheck Probe. After restarting again and again, the time interval will be very long. This is why many large system running in Kubernetes start up extremely slow. By implemented a Kubernetes Admission Webhook like Istio injecting Sidecar, nocalhost-dep can controls the starting order. When applications deployed, nocalhost-dep will inject InitContainers into the workload automatically. According to declared dependencies, nocalhost-dep keeps waiting for the dependent services's availability. Once all dependent service become available, the InitContainer exits, then the containers which container business logics start. There is no restarting, which means minimal time waiting of starting.","title":"Architecture"},{"location":"References/architecture/#what-is-nocalhost","text":"Nocalhost is Cloud Native Development Environment. Currently, it support developing applications based on Kubernetes: Deploy applications just one click, even with complex service dependencies Build, test and debug applications directly inside Kubernetes Develop with hot reloading : updates your running containers without rebuilding images or restarting containers","title":"What is Nocalhost?"},{"location":"References/architecture/#how-does-it-work","text":"Deploy Nocalhost Server (nocalhost-api, nocalhost-web) to the kubernetes cluster. For Admin Use the management platform provided by Nocalhost Server to create users, configure the application's kubernetes cluster, create applications, and configure the application's DevSpace(Currently, DevSpace = ServiceAccount + Namespace). When kubernetes cluster configured, nocalhost-dep will be automatically deployed in the nocalhost-reservered namespace to control the order of microservices' starting. For Developer Install the nhctl CLI on the client machine and install the Nocalhost plugin in the IDE. Configure the nocalhost-api server url (for example: http://ip:port) in the plugin and sign in server, then deploy application to the kubernetes cluster. For Developer Developers can switch a specified micro service to DevMode. Once DevMode started, Nocalhost will replace the container of that micro service to DevContainer specified by configuration, sync source codes to DevContainer and forward the port of DevContainer to local. Here's the diagram of Nocalhost with all the components tied together.","title":"How does it work?"},{"location":"References/architecture/#component","text":"IDE plugins * IDE plugin packs the capabilities of nhctl and nocalhost-api development environment management to provide users with a better experience. nhctl nhctl is the core component of nocalhost, here are the core features: Install Application Nocalhost will deploy applications to kubernetes cluster according to the dependencies of the application which is defined in config YAML under the .nocalhost directory. Hot Reloading Via File Sync Any changes made to the local source codes will be synchronized to the remote DevContainer automatically. Developer can recompile and restart their process to verify code changes. In the future, we will support configure hotreload commands instead of restart processes manually. uninstall application Uninstalling application from DevSpace. nocalhost-web * nocalhost-web provides a web dashboard to manage users, development kubernetes clusters, applications and DevSpaces. nocalhost-api * Nocalhost manages serviceAccount, namespace and application in kubernetes cluster through api-server, and persists to database, providing data support for IDE plugin usage. nocalhost-dep * When application microservices are deployed in a Kubernetes cluster, there is no way to controler the startup sequence and dependencies of these microservices. A typical scenario is: Service A and Service B both rely on Mysql, Redis, RabbitMQ. Service A and Service B cannot be started unless these dependent services are available. Usually developers have to wait the Pod's restarting rely on Kubernetes' HealthCheck Probe. After restarting again and again, the time interval will be very long. This is why many large system running in Kubernetes start up extremely slow. By implemented a Kubernetes Admission Webhook like Istio injecting Sidecar, nocalhost-dep can controls the starting order. When applications deployed, nocalhost-dep will inject InitContainers into the workload automatically. According to declared dependencies, nocalhost-dep keeps waiting for the dependent services's availability. Once all dependent service become available, the InitContainer exits, then the containers which container business logics start. There is no restarting, which means minimal time waiting of starting.","title":"Component"},{"location":"References/cli-commands/","text":"","title":"CLI Commands"},{"location":"References/file-sync/","text":"","title":"File sync"},{"location":"References/nocalhost-config-yaml-spec/","text":"1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 # Application name # type: string(dns1123) # default value: null # required # nhctl param: [NAME] # uniq name : nocalhost # Application manifest type # type: select\uff0coptions\uff1ahelm/rawManiifest # default value: null # required # nhctl param: --type,-t manifestType : helm # The application manifest or chart path is the relative path of the git repository. If the type is manifest, you can add more paths # type: string[] # default value: [\".\"] # required resourcePath : [ \"deployments/chart\" ] # If the value is true, try use with the least resources when installing (supplement, future support) # type: boolean # default value: false # optional # nhctl param: TODO minimalInstall : false # Before the application installed, per-execute the job # type: object[] # default value: [] # optional onPreInstall : # Job yaml file, the relative path of the repo root # type: string # required - path : \"job-1.yaml\" # Job name # type: string # required name : xxx-job # The order of execution of job, the smaller one is first # type: integer # default value: 0 # optional priority : -1 - path : \"job-2.yaml\" name : xxx2-job priority : 5 # After the application installed, post-execute the job (supplement, future support) # type: object[] # default value: [] # optional onPostInstall : # Job yaml file, the relative path of the repo root # type: string # required - path : \"job-1.yaml\" # Job name # type: string # required name : xxx-job # The order of execution of job, the smaller one is first # type: integer # default value: 0 # optional priority : -1 - path : \"job-2.yaml\" name : xxx2-job priority : 5 # Before the application uninstalled, per-execute the job (supplement, future support) # type: object[] # default value: [] # optional onPreUninstall : # Job yaml file, the relative path of the repo root # type: string # required - path : \"job-1.yaml\" # Job name # type: string # required name : xxx-job # The order of execution of job, the smaller one is first # type: integer # default value: 0 # optional priority : -1 - path : \"job-2.yaml\" name : xxx2-job priority : 5 # After the application uninstalled, post-execute the job (supplement, future support) # type: object[] # default value: [] # optional onPostUninstall : # Job yaml file, the relative path of the repo root # type: string # required - path : \"job-1.yaml\" # Job name # type: string # required name : xxx-job # The order of execution of job, the smaller one is first # type: integer # default value: 0 # optional priority : -1 - path : \"job-2.yaml\" name : xxx2-job priority : 5 # The Applicaion's services # type: object[] # default value: [] # optional services : # Name of service, name and nameRegex must be one of two. If the name and nameRegex are at the same time, only the name takes effect. # type: string # default value: null # optional - name : service1 # Regular expression of service, name and nameRegex must be one of two. If the name and nameRegex are at the same time, only the name takes effect. # type: string # default value: null # optional nameRegex : .*-mariadb # The Kubernetes Workloads type corresponding to the service # type: select, options: deployment/statefulset/pod/job/cronjob/daemonset \u5927\u5c0f\u5199\u4e0d\u654f\u611f # default value: deployment # required serviceType : deployment # The git repository clone url of the service # type: string # default value: null # required gitUrl : \"https://github.com/nocalhost/nocalhost.git\" # The docker image's url of the service in dev mode # type: string # default value: codingcorp.coding.net/xxxx/go:latest # required devContainerImage : \"codingcorp.coding.net/xxxx/go:latest\" # The command line shell of the service in dev mode # type: string # default value: \"/bin/sh\" # optional devContainerShell : \"bash\" # The synchronization file type of the service (supplement, future support) # \"send\" means one-way synchronization to the container, \"sendreceive\" means two-way synchronization # type: select\uff0csend/sendreceive # default value: \"send\" # optional syncType : send # List of files and directories synchronized in dev mode # type: string[] # default value: [\".\"] # optional syncDirs : - \"./src\" - \"./pkg/fff\" # List of ignored files and directories synchronized in dev mode # type: string[] # default value: [] # optional ignoreDirs : - \".git\" - \"./build\" # The port-forward canfigiure in dev mode # localPort:remotePort # type: string[] # default value: [] # optional devPort : - 8080:8080 - :8000 # random localPort, remotePort 8000 # Pods label selector (The service will wait for the Pods selected by the selector to start before starting) # type: string[] # default value: [] # optional dependPodsLabelSelector : - \"name=mariadb\" - \"app.kubernetes.io/name=mariadb\" # Jobs label selector (The service will wait for the Jobs selected by the selector to start before starting) # type: string[] # default value: [] # optional dependJobsLabelSelector : - \"name=init-job\" - \"app.kubernetes.io/name=init-job\" # The work directory in dev mode (The source code will synchronized to this directory, it will be persisted using PV.) (supplement, future support) # type: string # default value: \"/home/nocalhost-dev\" # optional workDir : \"/home/nocalhost-dev\" # The dev mode container directory (This directory will be persisted using PV.) (supplement, future support) # type: string[] # default value: [\"/home/nocalhost-dev\"] # optional persistentVolumeDir : - \"/home/nocalhost-dev\" # The build command of the service (use to build after the code changes) # type: string # default value: \"\" # optional buildCommand : \"./gradlew package\" # The run command of the service # type: string # default value: \"\" # optional runCommand : \"./gradlew bootRun\" # The debug command of the service # type: string # default value: \"\" # optional debugCommand : \"./gradlew bootRun --debug-jvm\" # The hot reload command of the service # type: string # default value: \"\" # optional hotReloadRunCommand : \"kill `ps -ef|grep -i gradlew| grep -v grep| awk '{print $2}'`; gradlew bootRun\" # The hot reload debug command of the service # type: string # default value: \"\" # optional hotReloadDebugCommand : \"kill `ps -ef|grep -i gradlew| grep -v grep| awk '{print $2}'`; gradlew bootRun --debug-jvm\" # The debug port of the service # type: string # default value: \"\" # optional remoteDebugPort : 5005 # Use VSCode's dev-container as the dev mode (supplement, future support) # type: string # default value: \"\" # optional useDevContainer : false - name : service2 nameRegex : ...","title":"Config Specs"},{"location":"References/port-forward/","text":"","title":"Port Forward"},{"location":"References/service-denepdency/","text":"","title":"Service Dependency"},{"location":"Tutorials/nocalhost-with-docker-desktop/","text":"","title":"Docker"},{"location":"Tutorials/nocalhost-with-helm/","text":"","title":"Helm"},{"location":"Tutorials/nocalhost-with-k8s-manifests/","text":"","title":"Kubernetes"},{"location":"Tutorials/nocalhost-with-minikube/","text":"","title":"MiniKube"},{"location":"Tutorials/nocalhost-with-serverless-kubernetes/","text":"","title":"Serverless Kubernetes"},{"location":"Tutorials/nocalhost-with-tke/","text":"","title":"TKE"},{"location":"Tutorials/nocalhost-without-ide-plugin/","text":"Start coding with nhctl Install nhctl: https://nocalhost.dev/installation Get \"Kubeconfig\" file of Application's DevSpace and save it. Install an application that you want to develop via nhctl: nhctl install <application name> --kubeconfig <kubeconfig> -u <a git repo url which contains helm chart or manifests> Enter DevMode by specify a workload that you want to develop: nhctl dev start <application name> --kubeconfig <kubeconfig> -d <the workload that you want to develop> Sync codes to DevMode containers: nhctl sync <application name> --kubeconfig <kubeconfig> -d <the workload that you want to develop> Forward ports from DevMode container to local(Optional): nhctl port-forward <application name> --kubeconfig <kubeconfig> -d <the workload that you want to develop> Coding locally and start your program remotely: kubectl --kubeconfig <kubeconfig> exec -it pod/<pod_name> -c nocalhost-dev -- bash Type run commonds in dev container <your program start command,like: ./gradlew bootRun> Note Click here to get more details about the arguments of nhctl","title":"CLI"},{"location":"Tutorials/nocalhost-without-ide-plugin/#start-coding-with-nhctl","text":"Install nhctl: https://nocalhost.dev/installation Get \"Kubeconfig\" file of Application's DevSpace and save it. Install an application that you want to develop via nhctl: nhctl install <application name> --kubeconfig <kubeconfig> -u <a git repo url which contains helm chart or manifests> Enter DevMode by specify a workload that you want to develop: nhctl dev start <application name> --kubeconfig <kubeconfig> -d <the workload that you want to develop> Sync codes to DevMode containers: nhctl sync <application name> --kubeconfig <kubeconfig> -d <the workload that you want to develop> Forward ports from DevMode container to local(Optional): nhctl port-forward <application name> --kubeconfig <kubeconfig> -d <the workload that you want to develop> Coding locally and start your program remotely: kubectl --kubeconfig <kubeconfig> exec -it pod/<pod_name> -c nocalhost-dev -- bash Type run commonds in dev container <your program start command,like: ./gradlew bootRun> Note Click here to get more details about the arguments of nhctl","title":"Start coding with nhctl"},{"location":"Tutorials/vscode-plugin/","text":"Start coding with Nocalhost VSCode Plugin (Recemmended) Install Nocalhost VSCode Plugin, here . Configure plugin and sigin nocalhost api server. Install application and start development. Click the install icon of the application that you want to develop on the left panel. Click the Workload of this application to watch the deployment progress and wait for the installation. Click the start develop icon to enter DevSpace and enjoy your coding.","title":"VScode Plugin"},{"location":"Tutorials/vscode-plugin/#start-coding-with-nocalhost-vscode-plugin-recemmended","text":"Install Nocalhost VSCode Plugin, here . Configure plugin and sigin nocalhost api server. Install application and start development. Click the install icon of the application that you want to develop on the left panel. Click the Workload of this application to watch the deployment progress and wait for the installation. Click the start develop icon to enter DevSpace and enjoy your coding.","title":"Start coding with Nocalhost VSCode Plugin (Recemmended)"}]}